C: 절차지향적 언어

C++: 객체지향적 언어(Object Oriented Programming)
•	데이터 처리에 좀 더 초점을 맞추는 프로그램 방식이 필요하고 그에 따라 객체 지향 프로그래밍의 시대가 열림
•	OOP는 데이터와 그 데이터를 처리하는 함수를 하나로 묶어놓은 객체(object)를 단위로 프로그래밍하는 방식이다.
•	클래스라는 개념을 도입, 클래스에서 관리할 수 있는 관련 변수 및 함수를 하나로 묶어 다룰 수 있는 방법 제공
•	C 문법 사용 가능
•	C 라이브러리 함수 사용 가능
•	C는 함수 중심 구조적 설계와 C++의 객체지향 설계 혼합 사용

C++의 특징
•	Abstraction, 데이터 추상화: 실 세상에서 다루는 방법과 유사하게 프로그램에서 처리하기 위해 특정 대상의 주요 특성만을 모델링하는 것. 
                              즉, 클래스에 데이터를 어떻게 처리할 것인지, 객체에 어떤 함수를 적용할 것인지 결정하여 그 객체를 대상으로 프로그래밍 하는 것. 
                              그 클래스를 추상화한 자료형이 Abstraction이다.
•	Encapsulation, 캡슐화: 객체 관련 데이터 및 함수들을 하나로 묶은 것. 캡슐화를 통해 클래스 내부에 데이터들은 정해진 함수에 의해서만 접근할 수 있도록 한다.
                         외부의 잘못된 접근이나 간섭으로부터 보호한다. 이를 Information Hiding 이라고 한다. 객체간의 역할을 구분하여 모듈화를 쉽게 만든다.
•	Inheritance, 상속: 기존에 정의되어 있는 클래스에 새로운 데이터나 함수를 추가하거나 기존의 함수를 수정하여 재정의하는 기능. 
                     기본 클래스와 파생 클래스 간 계층 구초(Hierarchy) 구성을 통해서 쉬운 클래스 라이브러리를 구축할 수 있다. 
                     상속을 이용한 새 클래스 작성 시 코드 재사용(reusability)향상 가능.
•	Polymorphism, 다형성: 동일한 이름의 함수가 상황에 따라 다르게 동작하는 것.
                      - 중복정의, overloading: 매개변수 자료형 또는 개수가 서로 다르지만 이름은 동일한 함수를 여러 개 정의, 필요 시 선택적으로 사용할 수 있게 한다.
                      - 재정의, overriding: 기본 클래스 및 파생 클래스에 동일한 이름의 함수가 포함

C++의 일반화 프로그래밍 언어(Generic Programming)
•	함수 및 클래스 정의 시 범용형(Generic Type)사용
•	C++에서는 템플릿을 이용하여 기능 지원
템플릿은 두가지로 구성:
      함수 템플릿: 함수를 정의하는 대신 함수를 만들어 내는 방법 정의, 주로 처리하는 방법은 동일하나 대상이 되는 데이터의 자료형이 다양한 경우 사용.
      클래스 템플릿: 클래스를 정의하는 대신 클래스를 생성하는 방법 정의.

C++ 프로그램 개발 과정
•	소스코드 작성 및 수정: 소스 파일명에는 반드시, .cpp 확장자를 붙여야 한다.
•	컴파일&링킹: 문제없이 컴파일 되면 오브젝트 파일이 생성되고 링커에 의해 오브젝트 파일이 실행파일로 만들어진다.
•	테스트
•	디버깅: 소스코드의 수정이 필요할 경우 프로그램 개발 과정을 다시 거쳐야 한다. 설계대로 제 동작이 이루어질 경우 각 개발 도구에 함께 제공하는 프로파일링 방법을 통해 성능 문제를 점검한다, Visual Studio 또는 DEV C++
•	다운 가능 링크: www.microsoft.com/en-us/download/developer-tools.aspx  (for Visual Studio)

<객체지향 프로그램에서 사용되는 용어>
클래스: 객체를 정의하는 원형
객체: 클래스에 정의된 대로 만들어진 실체(인스턴스)
인스턴스: 프로그램에서 실지로 실행할 객체
메소드: 클래스에 정의된 연산(함수)
메시지: 객체를 통해 메소드를 호출하는 것

